#!/usr/bin/env python3
"""
Preprocess the strain names in titer records to canonicalize strain names to
match the strain name format used for sequences.

Expects the strain names to be further standardized downstream to exactly match
sequence strain names.
"""
import argparse
from sys import stdin
from typing import Iterable
from augur.io.json import dump_ndjson, load_ndjson


def preprocess_strain_names(records: Iterable[dict],
                            virus_strain_field: str,
                            serum_strain_field: str,
                            new_virus_strain_field: str,
                            new_serum_strain_field: str,
                            strain_replacements_file: str,
                            abbrevation_replacements_file: str) -> Iterable:
    """
    Preprocess the strain name fields to canonicalize strain names to match
    the strain name format used for sequences
    """
    # TODO: load strain replacemen0ts and abbreviation replacements
    for record in records:
        virus_strain = record.get(virus_strain_field)
        serum_strain = record.get(serum_strain_field)

        if virus_strain is None:
            raise Exception(f"Records must have the expected virus strain field: {virus_strain_field!r}")

        if serum_strain is None:
            raise Exception(f"Records must have the expected serum strain field: {serum_strain_field!r}")

        # TODO: HI_fix_name
        record[new_virus_strain_field] = virus_strain
        record[new_serum_strain_field] = serum_strain

        yield record


def define_strain_fixes(self, fname):
    '''
    Open strain name fixing files and define corresponding dictionaries

    Copied from nextstrain/fauna/vdb/upload.py
    <https://github.com/nextstrain/fauna/blob/118aae93d08b0f7753f0d442e1665899fd6fd52b/vdb/upload.py#L142-L150>
    '''
    reader = csv.DictReader(filter(lambda row: row[0]!='#', open(fname)), delimiter='\t')
    fix_whole_name = {}
    for line in reader:
        fix_whole_name[line['label'].encode().decode('unicode-escape')] = line['fix']
    return fix_whole_name


def HI_fix_name(self, name, serum):
    '''
    Canonicalize strain names to match with vdb

    Copied from nextstrain/fauna/tdb/upload.py
    <https://github.com/nextstrain/fauna/blob/118aae93d08b0f7753f0d442e1665899fd6fd52b/tdb/upload.py#L146-L194>
    '''
    # replace all accents with ? mark
    original_name = name.encode('ascii', 'replace').decode('unicode-escape')
    # Replace whole strain names
    name = self.replace_strain_name(original_name, self.fix_whole_name)
    lookup_month = {'Jan': '1', 'Feb': '2', 'Mar': '3', 'Apr': '4', 'May': '5', 'Jun': '6',
                        'Jul': '7', 'Aug': '8', 'Sep': '9', 'Oct': '10', 'Nov': '11', 'Dec': '12'}
    name = name.replace('H1N1', '').replace('H5N6', '').replace('H3N2', '').replace('Human', '')\
        .replace('human', '').replace('//', '/').replace('.', '').replace(',', '').replace('&', '').replace(' ', '')\
        .replace('\'', '').replace('>', '').replace('-like', '').replace('+', '').replace('*', '')
    if re.match('[0-9]{1,2}([A|B]/.+)', name):  # 12B/Estonia/55669/2011 -> B/Estonia/55669/2011, 2B/Estonia/55669/2011 -> B/Estonia/55669/2011
        name = re.match('[0-9]{1,2}([A|B]/.+)', name).group(1)
    if serum and re.match(r'([A|B]/[A-Za-z-]+)[0-9]+(/[A-Za-z0-9_-]+/[0-9]{2,4})', name):  # B/Bris13/60/08 -> B/Bris/60/08, B/Fl13/6-Apr -> B/Fl/6-Apr
        name = re.match(r'([A|B]/[A-Za-z-]+)[0-9]+(/[A-Za-z0-9_-]+/[0-9]{2,4})', name).group(1) + re.match(r'([A|B]/[A-Za-z-]+)[0-9]+(/[A-Za-z0-9_-]+/[0-9]{2,4})', name).group(2)
    if serum and re.match(r'([A|B]/[A-Za-z-]+)[0-9]+(/[0-9]{1,2}-[A-Za-z]{3})', name):  # B/Fl1/6-Apr -> B/Fl/6-Apr, B/Bris1/7-Mar -> B/Bris/7-Mar
        name = re.match(r'([A|B]/[A-Za-z-]+)[0-9]+(/[0-9]{1,2}-[A-Za-z]{3})', name).group(1) + re.match(r'([A|B]/[A-Za-z-]+)[0-9]+(/[0-9]{1,2}-[A-Za-z]{3})', name).group(2)
    if re.match(r'([A|B]/[A-Za-z-]+/)([0-9]{1,2}-[A-Za-z]{3})', name):  # B/Fl/6-Apr -> B/Fl/4/2006, B/Stock/11-Dec -> B/Stock/12/2011
        try:
            date_pattern = re.match(r'([A|B]/[A-Za-z-]+/)([0-9]{1,2}-[A-Za-z]{3})', name).group(2).split('-')
            year = int(date_pattern[0])
            if year>68:
                year=1900+year
            else:
                year=2000+year
            date = lookup_month[date_pattern[1]] + "/" + str(year)
            name = re.match(r'([A|B]/[A-Za-z-]+/)([0-9]{1,2}-[A-Za-z]{3})', name).group(1) + date
        except:
            pass
    if re.match(r'([A|B]/[A-Za-z-]+/)([A-Za-z]{3}-[0-9]{1,2})', name):  # B/SHANDONG/JUL-97 -> B/SHANDONG/7/1997, A/NewJersey/8/1976
        try:
            date_pattern = re.match(r'([A|B]/[A-Za-z-]+/)([A-Za-z]{3}-[0-9]{1,2})', name).group(2).split('-')
            year = int(date_pattern[1])
            if year>68:
                year=1900+year
            else:
                year=2000+year
            date = lookup_month[date_pattern[0]] + "/" + str(year)
            name = re.match(r'([A|B]/[A-Za-z-]+/)([A-Za-z]{3}-[0-9]{1,2})', name).group(1) + date
        except:
            pass
    if re.match(r'([A|B]/)([A-Za-z-]+)(/.+)', name):
        match = re.match(r'([A|B]/)([A-Za-z-]+)(/.+)', name)
        abbrev = match.group(2).upper()
        if abbrev in self.HI_ref_name_abbrev:
            name = match.group(1) + self.HI_ref_name_abbrev[abbrev] + match.group(3)
    return name


def replace_strain_name(self, original_name, fixes={}):
    '''
    return the new strain name that will replace the original

    Copied from nextstrain/fauna/tdb/upload.py
    <https://github.com/nextstrain/fauna/blob/118aae93d08b0f7753f0d442e1665899fd6fd52b/tdb/upload.py#L196-L203>
    '''
    if original_name in fixes:
        return fixes[original_name]
    else:
        return original_name


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument("--virus-strain-field", default="virus_strain",
        help="The record field containing the original virus strain name.")
    parser.add_argument("--serum-strain-field", default="serum_strain",
        help="The record field containing the serum strain name.")
    parser.add_argument("--new-virus-strain-field", default="preprocessed_virus_strain",
        help="The new field for the preprocessed virus strain output.")
    parser.add_argument("--new-serum-strain-field", default="preprocessed_serum_strain",
        help="The new field for the preprocessed serum strain output.")
    parser.add_argument("--strain-replacements",
        help="A TSV file of full strain name replacements. " + \
             "Strains in the 'label' column are replaced with the strains in the 'fix' column.")
    parser.add_argument("--abbreviation-replacements",
        help="A TSV file of abbreviation replacements. " \
             "Abbreviations in the 'label' column are replaced with string in the 'fix' column.")

    args = parser.parse_args()

    records = load_ndjson(stdin)
    modified_records = preprocess_strain_names(
        records,
        args.virus_strain_field,
        args.serum_strain_field,
        args.new_virus_strain_field,
        args.new_serum_strain_field,
        args.strain_replacements,
        args.abbreviation_replacements)
    dump_ndjson(modified_records)
