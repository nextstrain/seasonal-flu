"""
This is the main ingest Snakefile that orchestrates the full ingest-titers
workflow and defines its default outputs.
"""
import os


configfile: os.path.join(workflow.basedir, "defaults/config.yaml")


include: "../shared/vendored/snakemake/config.smk"


preprocess_columns = config["preprocess_columns"]
preprocess_columns_set = set(preprocess_columns)

if cdc_inputs:=config["inputs"].get("cdc"):
    if not all(input.get("titers_tsv") for input in cdc_inputs):
        raise InvalidConfigError("Each CDC input must define `titers_tsv`.")
    if not all(isinstance(input.get("field_map"), dict) for input in cdc_inputs):
        raise InvalidConfigError("Each CDC input must define `field_map` dict")

    # If we ingesting CDC data, make sure fields are renamed to the preprocess_columns
    for input in cdc_inputs:
        new_field_names = set(input["field_map"].values())
        if new_field_names != preprocess_columns_set:
            raise InvalidConfigError(
                f"`field_map` for {input['titers_tsv']!r}` does not map to all preprocess columns {preprocess_columns!r}")


def format_field_map(field_map: dict[str, str]) -> str:
    """
    Format dict to `"key1"="value1" "key2"="value2"...` for use in shell commands.
    """
    return [f'{key}={value}' for key, value in field_map.items()]


def get_cdc_field_map(titers_tsv):
    """
    Get the corresponding field_map for the provided CDC *titers_tsv* from the config
    """
    cdc_inputs = config["inputs"]["cdc"]
    for input in cdc_inputs:
        if input["titers_tsv"] == titers_tsv:
            return input["field_map"]


rule preprocess_cdc:
    """
    Preprocess CDC titer TSVs:
    - adding source columns
    - select the subset of standard columns
    - rename columns to standard name
    """
    input:
        titers="{titers_tsv}",
    output:
        titers="results/preprocess/cdc/{titers_tsv}",
    log:
        "logs/preprocess_cdc/{titers_tsv}.txt",
    benchmark:
        "benchmarks/preprocess_cdc/{titers_tsv}.txt",
    params:
        source_file = lambda _, input: input.titers,
        fields_to_keep= lambda w: ",".join(get_cdc_field_map(w.titers_tsv).keys()),
        field_map=lambda w: format_field_map(get_cdc_field_map(w.titers_tsv)),
    shell:
        r"""
        exec &> >(tee {log:q})

        cat {input.titers:q} \
            | csvtk mutate2 -t \
                --name "source" \
                --expression "'cdc'" \
            | csvtk mutate2 -t \
                --name "source_file" \
                --expression "'{params.source_file:q}'" \
            | csvtk mutate2 -t \
                --name "source_column" \
                --expression "'N/A'" \
            | csvtk cut -t -F -f "*" \
                --show-row-number \
            | csvtk cut -t \
                --fields {params.fields_to_keep:q} \
            | augur curate rename \
                --field-map {params.field_map:q} \
                --duplicate-reporting silent \
                --metadata - \
                --output-metadata {output.titers:q}
        """


def _get_preprocessed_titers(wildcards):
    """
    Returns a list of expected preprocessed titers TSVs
    """
    preprocessed_titers = []
    for source, source_inputs in config["inputs"].items():
        for input in source_inputs:
            titer_file = input["titers_tsv"]
            preprocessed_titers.append(f"results/preprocess/{source}/{titer_file}")

    return preprocessed_titers


rule concatenate_preprocessed_titers:
    input: _get_preprocessed_titers,
    output:
        titers="results/preprocessed_titers.tsv",
    log:
        "logs/concatenate_preprocessed_titers.txt",
    benchmark:
        "benchmarks/concatenate_preprocessed_titers.txt",
    shell:
        r"""
        exec &> >(tee {log:q})

        csvtk concat -t \
            {input:q} \
            > {output.titers:q}
        """

# Copied from the sequences ingest workflow
# <https://github.com/nextstrain/seasonal-flu/blob/cd564882ed63cf1b791f8ac0651be69cd7cdd468/ingest/rules/curate.smk#L17-L32>
# Once the fauna source files have been migrated to this repo
# then we can directly use the local files and remove this rule.
rule fetch_from_fauna:
    """
    Fetch files from nextstrain/fauna/source-data that we need to ensure the
    strain names of the sequences are in-sync with strain names in titer data.

    Currently used to fetch the following files for rule curate:
    - flu_strain_name_fix.tsv
    - flu_fix_location_label.tsv
    """
    output: "data/fauna-source-data/{source_data_file}",
    params:
        url=lambda w: f"https://github.com/nextstrain/fauna/raw/@/source-data/{w.source_data_file}",
    shell:
        """
        curl -fsSL {params.url} > {output}
        """


rule curate_titers:
    input:
        titers="results/preprocessed_titers.tsv",
        strain_replacements="data/fauna-source-data/flu_strain_name_fix.tsv",
        strain_location_replacements="data/fauna-source-data/flu_fix_location_label.tsv",
        ref_name_abbreviation_replacements="data/fauna-source-data/HI_ref_name_abbreviations.tsv",
    output:
        titers="results/curated_titers.tsv",
    log:
        "logs/curate_titers.txt",
    benchmark:
        "benchmarks/curate_titers.txt",
    params:
        date_fields = config["curate"]["date_fields"],
        expected_date_formats = config["curate"]["expected_date_formats"],
        assay_type_field = config["curate"]["assay_type_field"],
        subtype_field = config["curate"]["subtype_field"],
        new_type_field = config["curate"]["new_type_field"],
    shell:
        r"""
        exec &> >(tee {log:q})

        cat {input.titers:q} \
            | augur curate normalize-strings \
                --duplicate-reporting silent \
                --metadata - \
            | augur curate format-dates \
                --date-fields {params.date_fields:q} \
                --expected-date-format {params.expected_date_formats:q} \
                --duplicate-reporting silent \
            | {workflow.basedir}/scripts/standardize-assay-types \
                --assay-type-field {params.assay_type_field:q} \
            | {workflow.basedir}/scripts/standardize-subtypes \
                --subtype-field {params.subtype_field:q} \
                --new-type-field {params.new_type_field:q} \
            | augur curate passthru \
                --duplicate-reporting silent \
                --output-metadata {output.titers:q}

        # format titer - needs source
        # standardize serum host
        # format passage category - needs serum_host
        # standardize strain names - HI fixes first?
        # standardize strain names - based on ingest? - needs passage category, type (A/B)
        # create index?
        """
