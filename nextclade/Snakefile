configfile: "config/config_dict.yaml"

import datetime


wildcard_constraints:
    flu_type="[A-Za-z0-9]+",
    lineage=r"h3n2|h1n1pdm|vic|yam",
    segment = r"pb2|pb1|pa|ha|np|na|mp|ns",
    reference="[^_/]+",


def genes(w):
    return {
        'ha': ["SigPep", "HA1", "HA2"],
        'na': ["NA"]
    }.get(w.segment, [])

def all_builds(w):
    builds = []
    for lineage in config["builds"]:
        for segment in config["builds"][lineage]:
            for ref in config["builds"][lineage][segment]["refs"]:
                builds.append(f"datasets/{lineage}/{segment}/{ref}/tree.json")
                builds.append(f"builds/{lineage}/{segment}/{ref}/founder_sequences.translations.done")
    return builds

rule all:
    input:
        all_builds


rule download_sequences:
    output:
        sequences="data/{lineage}_{segment}.fasta",
    params:
        s3_path="s3://nextstrain-data-private/files/workflows/seasonal-flu/{lineage}/{segment}/sequences.fasta.xz",
    shell:
        """
        aws s3 cp {params.s3_path} - | xz -c -d > {output.sequences}
        """

rule download_metadata:
    output:
        metadata="data/{lineage}_{segment}_metadata-raw.tsv",
    params:
        s3_path="s3://nextstrain-data-private/files/workflows/seasonal-flu/{lineage}/metadata.tsv.xz",
    shell:
        """
        aws s3 cp {params.s3_path} - | xz -c -d > {output.metadata}
        """

rule get_nextclade_dataset:
    output:
        "nextclade/{lineage}_{segment}/reference.fasta",
    threads: 1
    shell:
        """
        nextclade3 dataset get -n flu_{wildcards.lineage}_{wildcards.segment} --output-dir nextclade/{wildcards.lineage}_{wildcards.segment}
        """

rule run_nextclade:
    input:
        sequences="data/{lineage}_{segment}.fasta",
        reference="nextclade/{lineage}_{segment}/reference.fasta",
    output:
        "data/{lineage}_{segment}_nextclade.tsv",
    threads: workflow.cores
    shell:
        """
        nextclade3 run -j {threads} -D nextclade/{wildcards.lineage}_{wildcards.segment} \
                  {input.sequences} --quiet --output-tsv {output}
        """

def get_clade_columns(w):
    return ",".join(["seqName", "qc.overallStatus"] + {
        'h3n2_ha':["clade", "subclade"],
        'h1n1pdm_ha':["clade", "subclade"],
        'vic_ha':["clade", "subclade"]
    }.get(f"{w.lineage}_{w.segment}", ["clade"]))

rule combined_with_metadata:
    input:
        nextclade="data/{lineage}_{segment}_nextclade.tsv",
        metadata="data/{lineage}_{segment}_metadata-raw.tsv"
    output:
        metadata="data/{lineage}_{segment}_metadata.tsv"
    params:
        nextclade_columns=get_clade_columns
    shell:
        """
        tsv-select -H -f {params.nextclade_columns} {input.nextclade} \
            | csvtk join -t --fields "strain;seqName" {input.metadata} /dev/stdin > {output.metadata}
        """


rule download_clades:
    message:
        "Downloading clade definitions for {wildcards.lineage} from {params.source_tsv} -> {output}"
    output:
        clade_tsv = "data/{clade}_{lineage}_{segment}_{reference}_raw.tsv"
    params:
        source_tsv=lambda w: (config['clade_repo'] if w.lineage!='yam' else '') + config["builds"][w.lineage][w.segment]["clade_systems"][w.clade]['url'],
    shell:
        """
        curl {params.source_tsv} > {output.clade_tsv}
        """

rule download_changelog_clades:
    message:
        "Downloading nomenclature changelog for {wildcards.lineage} from {params.source} -> {output}"
    output:
        changelog = "data/{lineage}_{segment}_changelog.md"
    params:
        source=lambda w: config['clade_repo'] + config["builds"][w.lineage][w.segment]["changelog"],
    shell:
        """
        curl {params.source} > {output.changelog}
        """

rule download_changelog_dataset:
    message:
        "Downloading previous dataset changelog for {wildcards.lineage} from {params.source} -> {output}"
    output:
        changelog = "data/{lineage}_{segment}_{reference}_dataset-changelog.md"
    params:
        source=lambda w: f"{config['dataset_repo']}/{w.lineage}/{w.segment}/{w.reference}/CHANGELOG.md",
    shell:
        """
        curl {params.source} > {output.changelog}
        """

rule offset_clades:
    input:
        rules.download_clades.output,
    output:
        "data/{clade}_{lineage}_{segment}_{reference}.tsv",
    params:
        offset=lambda w: config["builds"][w.lineage][w.segment]['refs'][w.reference][
            "clade_offset"
        ],
    shell:
        """
        perl -F'\\t' -ne \
            '$F[2]+={params.offset} if $F[1] =~ "nuc"; \
            print join "\\t", @F' \
            {input} \
            >{output}
        """

rule subsample:
    input:
        sequences="data/{lineage}_{segment}.fasta",
        metadata="data/{lineage}_{segment}_metadata.tsv",
        include_strains="../config/{lineage}/reference_strains.txt",
        nextclade_include="dataset_config/{lineage}/includes.txt",
        exclude="../config/{lineage}/outliers.txt",
    output:
        sampled_sequences="build/{lineage}/{segment}/{reference}/subsample_tmp.fasta",
        sampled_strains="build/{lineage}/{segment}/{reference}/subsample_tmp.txt",
    params:
        filter_arguments=lambda w: config["builds"][w.lineage][w.segment]["refs"][
            w.reference
        ]["filter"],
        reference_EPI_ISL=lambda w: config["builds"][w.lineage][w.segment]["refs"][
            w.reference
        ]["reference_EPI_ISL"]
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --exclude {input.exclude} \
            --include {input.include_strains} {input.nextclade_include} \
            --include-where gisaid_epi_isl={params.reference_EPI_ISL} \
            --exclude-where qc.overallStatus='bad' \
            {params.filter_arguments} \
            --output-sequences {output.sampled_sequences} \
            --output-strains {output.sampled_strains}
        """

rule subsample_harddate:
    input:
        sequences=rules.subsample.output.sampled_sequences,
        metadata="data/{lineage}_{segment}_metadata.tsv"
    output:
        sampled_sequences="build/{lineage}/{segment}/{reference}/subsample.fasta",
        sampled_strains="build/{lineage}/{segment}/{reference}/subsample.txt",
    params:
        hardmin=lambda w: config["builds"][w.lineage][w.segment]["refs"][
            w.reference
        ]["hardmin_date"],
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --min-date {params.hardmin} \
            --output-sequences {output.sampled_sequences} \
            --output-strains {output.sampled_strains}
        """

rule align:
    input:
        sequences="build/{lineage}/{segment}/{reference}/subsample.fasta",
        annotation="dataset_config/{lineage}/{segment}/{reference}/annotation.gff",
        reference="dataset_config/{lineage}/{segment}/{reference}/reference.fasta",
    output:
        alignment="build/{lineage}/{segment}/{reference}/align.aligned.fasta"
    params:
        outdir=lambda w: f"build/{w.lineage}/{w.segment}/{w.reference}/aligned.gene.{{cds}}.fasta",
        nextclade_bin = "nextclade3"
    threads: 3
    shell:
        """
        {params.nextclade_bin} run \
            --jobs={threads} \
            --input-ref {input.reference} \
            --input-annotation {input.annotation} \
            --gap-alignment-side right \
            --output-translations {params.outdir} \
            --output-fasta {output.alignment} \
            {input.sequences} \
            2>&1
        """


rule tree:
    input:
        alignment=rules.align.output.alignment,
    output:
        tree="build/{lineage}/{segment}/{reference}/tree_raw.nwk",
    threads: 3
    shell:
        """
        augur tree \
            --alignment {input.alignment} \
            --output {output.tree} \
            --nthreads {threads} \
            --tree-builder-args '-ninit 10 -n 4 -czb' \
            > /dev/null
        """

# root using dates in treetime, use 1500 as sequence length (good enough, doesn't matter)
rule root:
    input:
        tree=rules.tree.output.tree,
        metadata="data/{lineage}_{segment}_metadata.tsv",
    output:
        tree="build/{lineage}/{segment}/{reference}/tree_rooted.nwk",
    params:
        outdir = "build/{lineage}/{segment}/{reference}/tt_out"
    shell:
        """
        treetime clock \
            --tree {input.tree} \
            --sequence-length 1500 \
            --dates {input.metadata} \
            --clock-filter 3 \
            --clock-filter-method local \
            --outdir {params.outdir}
        cp {params.outdir}/rerooted.newick {output.tree}
        """

rule prune_outliers:
    input:
        tree = rules.root.output.tree
    output:
        tree="build/{lineage}/{segment}/{reference}/tree_rooted_pruned.nwk"
    params:
        outliers = "build/{lineage}/{segment}/{reference}/tt_out/outliers.tsv"
    run:
        from pathlib import Path
        import pandas as pd
        from Bio import Phylo

        T = Phylo.read(input.tree, 'newick')

        if Path(params.outliers).exists():
            outliers = pd.read_csv(params.outliers, sep='\t', index_col=0)

            for n in outliers.index:
                if outliers.loc[n,"given_date"]>2020 and ('-egg' not in n):
                    print("prune", n)
                    T.prune(n)

        Phylo.write(T, output.tree, "newick")

# refine while keeping the root
rule refine:
    input:
        tree=rules.prune_outliers.output.tree,
        alignment=rules.align.output.alignment,
        metadata="data/{lineage}_{segment}_metadata.tsv"
    output:
        tree="build/{lineage}/{segment}/{reference}/tree.nwk",
        node_data="build/{lineage}/{segment}/{reference}/branch_lengths.json",
    threads: 1
    shell:
        """
        augur refine \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --metadata {input.metadata} \
            --output-tree {output.tree} \
            --output-node-data {output.node_data} \
            --keep-root \
            --divergence-unit mutations-per-site
        """


rule ancestral:
    message:
        """
        Reconstructing ancestral sequences and mutations
          - inferring ambiguous mutations
        """
    input:
        tree=rules.refine.output.tree,
        alignment=rules.align.output.alignment,
        annotation="dataset_config/{lineage}/{segment}/{reference}/annotation.gff",
        reference="dataset_config/{lineage}/{segment}/{reference}/reference.fasta",
    output:
        node_data="build/{lineage}/{segment}/{reference}/muts.json",
    params:
        inference="joint",
        genes=genes,
        translations= "build/{lineage}/{segment}/{reference}/aligned.gene.%GENE.fasta",
    shell:
        """
        augur ancestral \
            --tree {input.tree} \
            --alignment {input.alignment} \
            --inference {params.inference} \
            --infer-ambiguous \
            --genes {params.genes} \
            --annotation {input.annotation} \
            --translations {params.translations:q} \
            --root-sequence {input.reference} \
            --output-node-data {output.node_data}
        """

rule clades:
    message:
        "Adding internal clade labels"
    input:
        tree=rules.refine.output.tree,
        muts=rules.ancestral.output.node_data,
        clades=rules.offset_clades.output,
    output:
        node_data="build/{lineage}/{segment}/{reference}/clade_{clade}.json",
    params:
        membership_key= lambda w: config["builds"][w.lineage][w.segment]["clade_systems"][w.clade].get('key', 'clade_membership'),
        label_key= lambda w: config["builds"][w.lineage][w.segment]["clade_systems"][w.clade].get('key', 'clade')
    shell:
        """
        augur clades --tree {input.tree} \
            --mutations {input.muts} \
            --clades {input.clades} \
            --membership-name {params.membership_key} \
            --label-name {params.label_key} \
            --output-node-data {output.node_data} \
        """

rule virus_specific_jsons:
    input:
        auspice_config= "config/auspice_config.json",
        pathogen = "config/pathogen.json",
        additional_pathogen="dataset_config/{lineage}/{segment}/{reference}/pathogen.json",
    output:
        pathogen = "build/{lineage}/{segment}/{reference}/pathogen.json",
        auspice = "build/{lineage}/{segment}/{reference}/auspice_config.json",
    params:
        clades = lambda w: [config["builds"][w.lineage][w.segment]["clade_systems"][clade].get('key', 'default')
                            for clade in config["builds"][w.lineage][w.segment]["clade_systems"]],
        reference_name = lambda w: config["builds"][w.lineage][w.segment]['refs'][w.reference]['reference_strain']
    shell:
        """
        python3 scripts/merge_jsons.py --lineage {wildcards.lineage} \
            --reference {wildcards.reference} \
            --reference-name {params.reference_name} \
            --segment {wildcards.segment} --clades {params.clades} \
            --pathogen-jsons {input.pathogen} {input.additional_pathogen} \
            --auspice-config {input.auspice_config} \
            --output-pathogen {output.pathogen} \
            --output-auspice {output.auspice}
        """



def get_node_data(w):
    node_data = [
        rules.refine.output.node_data,
        "build/{lineage}/{segment}/{reference}/muts.json".format(**w),
    ]

    for clade in config["builds"][w.lineage][w.segment]["clade_systems"]:
        node_data.append("build/{lineage}/{segment}/{reference}/".format(**w) + f'clade_{clade}.json')

    return node_data


rule export:
    message:
        "Exporting data files for auspice"
    input:
        tree=rules.refine.output.tree,
        metadata="data/{lineage}_{segment}_metadata.tsv",
        node_data = get_node_data,
        auspice_config= "build/{lineage}/{segment}/{reference}/auspice_config.json"
    output:
        auspice_json="build/{lineage}/{segment}/{reference}/auspice.json",
    params:
        fields="strain region country date gisaid_epi_isl accession_{segment}",
        select_fields = ','.join(["strain", "region", "country", "date", "gisaid_epi_isl", "accession_{segment}"]),
        date=datetime.datetime.utcnow().strftime("%Y-%m-%d"),
    shell:
        """
        tsv-select -H -f {params.select_fields} {input.metadata} > {input.metadata}.tmp
        augur export v2 \
            --tree {input.tree} \
            --metadata {input.metadata}.tmp \
            --node-data {input.node_data}\
            --auspice-config {input.auspice_config} \
            --color-by-metadata {params.fields} \
            --include-root-sequence-inline \
            --minify-json \
            --title "Nextclade reference tree for Influenza type:{wildcards.lineage} segment:{wildcards.segment} with root {wildcards.reference} built on {params.date}" \
            --output {output.auspice_json} 2>&1;
        """


rule generate_sample_sequences:
    input:
        sequences="data/{lineage}_{segment}.fasta",
        metadata="data/{lineage}_{segment}_metadata.tsv"
    output:
        sequences="build/{lineage}/{segment}/{reference}/sample_sequences.fasta",
    shell:
        """
        augur filter \
            --sequences {input.sequences} \
            --metadata {input.metadata} \
            --min-date 2020 --group-by year --subsample-max-sequences 50  \
            --exclude-ambiguous-dates-by year \
            --exclude-where 'country!=Usa' 'submitting_lab!=Centers For Disease Control And Prevention' \
            --probabilistic-sampling \
            --output-sequences {output.sequences}
        """

rule extract_clade_founders:
    input:
        clades="build/{lineage}/{segment}/{reference}/clade_subclade.json",
        ancestral = "build/{lineage}/{segment}/{reference}/muts.json",
    output:
        sequences="build/{lineage}/{segment}/{reference}/founder_sequences.fasta",
    shell:
        """
        python3 scripts/extract_founder_sequences.py \
            --clades-json {input.clades} \
            --ancestral-json {input.ancestral} \
            --output {output.sequences}
        """

rule translate_clade_founders:
    input:
        sequences=rules.extract_clade_founders.output.sequences,
        annotation="dataset_config/{lineage}/{segment}/{reference}/annotation.gff",
        reference="dataset_config/{lineage}/{segment}/{reference}/reference.fasta",
    output:
        translations="build/{lineage}/{segment}/{reference}/founder_sequences.translations.done",
    params:
        outdir=lambda w: f"build/{w.lineage}/{w.segment}/{w.reference}/founder_sequences_{{cds}}.fasta",
        nextclade_bin = "nextclade3"
    threads: 3
    shell:
        """
        {params.nextclade_bin} run \
            --jobs={threads} \
            --input-ref {input.reference} \
            --input-annotation {input.annotation} \
            --gap-alignment-side right \
            --in-order \
            --output-translations {params.outdir} \
            {input.sequences}
        touch {output.translations}
        """


rule make_dataset:
    input:
        sequences="build/{lineage}/{segment}/{reference}/sample_sequences.fasta",
        auspice_json="build/{lineage}/{segment}/{reference}/auspice.json",
        annotation="dataset_config/{lineage}/{segment}/{reference}/annotation.gff",
        reference="dataset_config/{lineage}/{segment}/{reference}/reference.fasta",
        readme="dataset_config/{lineage}/{segment}/{reference}/README.md",
        dataset_changelog="data/{lineage}_{segment}_{reference}_dataset-changelog.md",
        changelog="data/{lineage}_{segment}_changelog.md",
        pathogen_json="build/{lineage}/{segment}/{reference}/pathogen.json",
    output:
        sequences="datasets/{lineage}/{segment}/{reference}/sequences.fasta",
        tree="datasets/{lineage}/{segment}/{reference}/tree.json",
        annotation="datasets/{lineage}/{segment}/{reference}/genome_annotation.gff3",
        reference="datasets/{lineage}/{segment}/{reference}/reference.fasta",
        readme="datasets/{lineage}/{segment}/{reference}/README.md",
        pathogen_json="datasets/{lineage}/{segment}/{reference}/pathogen.json",
        auspice="auspice/{lineage}_{segment}_{reference}.json",
        changelog="datasets/{lineage}/{segment}/{reference}/CHANGELOG.md",
    shell:
        """
        cp {input.sequences} {output.sequences}
        cp {input.auspice_json} {output.tree}
        cp {input.reference} {output.reference}
        cp {input.readme} {output.readme}
        cp {input.dataset_changelog} {output.changelog}
        cp {input.annotation} {output.annotation}
        cp {input.pathogen_json} {output.pathogen_json}
        cp {input.auspice_json} {output.auspice}
        """



rule clean:
    shell:
        """
        rm -rf build datasets auspice
        """


rule clean_all:
    shell:
        """
        rm -rf build
        rm -rf auspice
        rm -rf datasets
        rm -rf data/
        """
